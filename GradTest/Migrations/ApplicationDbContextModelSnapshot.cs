// <auto-generated />
using System;
using GradTest.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GradTest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GradTest.Domain.Entities.ExchangeRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("USD")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ZAR")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("GradTest.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<decimal>("ZarToUsd")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GradTest.Domain.Entities.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("GradTest.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b3d0b78-ba5e-4213-a46d-28fc5259b576"),
                            Category = "Books",
                            Description = "A mythic history of Middle-earth by J.R.R. Tolkien.",
                            Name = "The Silmarillion",
                            Price = 299.99m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("b57e7561-3b40-473b-83f8-f11aa2d24cf8"),
                            Category = "Books",
                            Description = "The first novel in the Witcher Saga by Andrzej Sapkowski.",
                            Name = "Blood of Elves",
                            Price = 199.99m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("77f408ea-6a8d-47ab-a5aa-c02d70acd8be"),
                            Category = "Books",
                            Description = "The second volume of The Lord of the Rings.",
                            Name = "The Two Towers",
                            Price = 249.99m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("547cb7c0-ab1f-43ca-aef5-9470971ddabd"),
                            Category = "Books",
                            Description = "Geralt continues his journey amidst political tension.",
                            Name = "Time of Contempt",
                            Price = 189.99m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("eea0df23-62f3-45ff-9b8b-66e5c93496ea"),
                            Category = "Books",
                            Description = "Bilbo’s adventure to the Lonely Mountain.",
                            Name = "The Hobbit",
                            Price = 219.99m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("a5aa4a09-9a16-45c7-a272-7de625961987"),
                            Category = "Books",
                            Description = "Final book in the Witcher Saga.",
                            Name = "Lady of the Lake",
                            Price = 209m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("c8b39dc8-2ee6-4dcf-b309-97d1369a3117"),
                            Category = "Books",
                            Description = "The epic conclusion of the War of the Ring.",
                            Name = "The Return of the King",
                            Price = 269m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("22b06d78-512b-46d5-a6d2-6b99f9a87405"),
                            Category = "Books",
                            Description = "A standalone Witcher novel.",
                            Name = "Season of Storms",
                            Price = 189m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("80793044-1b16-4c20-9751-4ff4978b2e6a"),
                            Category = "Clothing",
                            Description = "T-shirt with the cover art for the Season of Storms book.",
                            Name = "Season of Storms t-shirt M",
                            Price = 189m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("d6cabbc5-0746-4bde-9575-42f7000ee478"),
                            Category = "Clothing",
                            Description = "T-shirt with the cover art for the Blood of Elves book.",
                            Name = "Blood of Elves t-shirt M",
                            Price = 189m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("29d7d314-6f36-48c4-9bd5-1f36083b70b7"),
                            Category = "Clothing",
                            Description = "T-shirt with the cover art for the The Two Towers book.",
                            Name = "The Two Towers t-shirt M",
                            Price = 189m,
                            StockQuantity = 400
                        });
                });

            modelBuilder.Entity("GradTest.Domain.Entities.OrderProduct", b =>
                {
                    b.HasOne("GradTest.Domain.Entities.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GradTest.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GradTest.Domain.Entities.Order", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
