// <auto-generated />
using System;
using GradTest.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GradTest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250718054749_SeedingData3")]
    partial class SeedingData3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GradTest.Domain.Entities.ExchangeRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("USD")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ZAR")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("GradTest.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<decimal>("ZarToUsd")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GradTest.Domain.Entities.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("GradTest.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60cc318b-5231-4138-b098-3618955a9ce3"),
                            Category = "Book",
                            Description = "A mythic history of Middle-earth by J.R.R. Tolkien.",
                            Name = "The Silmarillion",
                            Price = 299.99m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("fe22e924-98bc-4458-94de-390633a9af5e"),
                            Category = "Book",
                            Description = "The first novel in the Witcher Saga by Andrzej Sapkowski.",
                            Name = "Blood of Elves",
                            Price = 199.99m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("c7182d79-e15a-44cd-bef8-0358a885d09f"),
                            Category = "Book",
                            Description = "The second volume of The Lord of the Rings.",
                            Name = "The Two Towers",
                            Price = 249.99m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("ec0166b7-12b9-4814-96a5-a1473c6aa6a9"),
                            Category = "Book",
                            Description = "Geralt continues his journey amidst political tension.",
                            Name = "Time of Contempt",
                            Price = 189.99m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("dd920e55-c7f4-4695-a7a8-e6b93b90a671"),
                            Category = "Book",
                            Description = "Bilbo’s adventure to the Lonely Mountain.",
                            Name = "The Hobbit",
                            Price = 219.99m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("57ef1877-7411-4b7b-b66f-2b347b084405"),
                            Category = "Book",
                            Description = "Final book in the Witcher Saga.",
                            Name = "Lady of the Lake",
                            Price = 209m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("f062a794-6199-4b5d-a363-5f6bb818c3ec"),
                            Category = "Book",
                            Description = "The epic conclusion of the War of the Ring.",
                            Name = "The Return of the King",
                            Price = 269m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("43d069af-3a6b-4a71-9086-86dccf419c66"),
                            Category = "Book",
                            Description = "A standalone Witcher novel.",
                            Name = "Season of Storms",
                            Price = 189m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("f5865d9f-0408-4ca9-8e14-e74fe3e39a2b"),
                            Category = "Clothing",
                            Description = "T-shirt with the cover art for the Season of Storms book.",
                            Name = "Season of Storms t-shirt M",
                            Price = 189m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("6ebb72a6-bcb9-48d7-a5f1-59b79f29aac3"),
                            Category = "Clothing",
                            Description = "T-shirt with the cover art for the Blood of Elves book.",
                            Name = "Blood of Elves t-shirt M",
                            Price = 189m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("9a880538-161e-4bd9-94b2-5f586e9169c9"),
                            Category = "Clothing",
                            Description = "T-shirt with the cover art for the The Two Towers book.",
                            Name = "The Two Towers t-shirt M",
                            Price = 189m,
                            StockQuantity = 400
                        });
                });

            modelBuilder.Entity("GradTest.Domain.Entities.OrderProduct", b =>
                {
                    b.HasOne("GradTest.Domain.Entities.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GradTest.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GradTest.Domain.Entities.Order", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
