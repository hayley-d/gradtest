// <auto-generated />
using System;
using GradTest.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GradTest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250718054646_SeedingData2")]
    partial class SeedingData2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GradTest.Domain.Entities.ExchangeRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("USD")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ZAR")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("GradTest.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<decimal>("ZarToUsd")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GradTest.Domain.Entities.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("GradTest.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("87a13776-11a1-4f8a-bc63-bbd8b4d609a9"),
                            Category = "Book",
                            Description = "A mythic history of Middle-earth by J.R.R. Tolkien.",
                            Name = "The Silmarillion",
                            Price = 299.99m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("48e55bb4-56b8-4c8e-b074-641899ba89a8"),
                            Category = "Book",
                            Description = "The first novel in the Witcher Saga by Andrzej Sapkowski.",
                            Name = "Blood of Elves",
                            Price = 199.99m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("8c0075b2-03fe-4708-861c-691023e8de9f"),
                            Category = "Book",
                            Description = "The second volume of The Lord of the Rings.",
                            Name = "The Two Towers",
                            Price = 249.99m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("450a92f2-2e00-48a4-95ed-7ea9e207fe96"),
                            Category = "Book",
                            Description = "Geralt continues his journey amidst political tension.",
                            Name = "Time of Contempt",
                            Price = 189.99m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("82dc1c3c-e2f6-4857-8765-db2373f466f1"),
                            Category = "Book",
                            Description = "Bilbo’s adventure to the Lonely Mountain.",
                            Name = "The Hobbit",
                            Price = 219.99m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("27d328de-7853-4186-aa29-d24726acb6c5"),
                            Category = "Book",
                            Description = "Final book in the Witcher Saga.",
                            Name = "Lady of the Lake",
                            Price = 209m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("9b4f089a-cd4b-4711-9465-a82c97b3e9fa"),
                            Category = "Book",
                            Description = "The epic conclusion of the War of the Ring.",
                            Name = "The Return of the King",
                            Price = 269m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("b0a89ade-eafd-43aa-b730-2029c9c6fab2"),
                            Category = "Book",
                            Description = "A standalone Witcher novel.",
                            Name = "Season of Storms",
                            Price = 189m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("fdc734f4-c3e6-4034-a3a6-d09ec04aba5f"),
                            Category = "Clothing",
                            Description = "T-shirt with the cover art for the Season of Storms book.",
                            Name = "Season of Storms t-shirt M",
                            Price = 189m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("ac4a4eb2-3a5c-4a58-9fc1-68501e25ae7b"),
                            Category = "Clothing",
                            Description = "T-shirt with the cover art for the Blood of Elves book.",
                            Name = "Blood of Elves t-shirt M",
                            Price = 189m,
                            StockQuantity = 400
                        },
                        new
                        {
                            Id = new Guid("67fb457c-0929-405d-a163-4f31eda363cf"),
                            Category = "Clothing",
                            Description = "T-shirt with the cover art for the The Two Towers book.",
                            Name = "The Two Towers t-shirt M",
                            Price = 189m,
                            StockQuantity = 400
                        });
                });

            modelBuilder.Entity("GradTest.Domain.Entities.OrderProduct", b =>
                {
                    b.HasOne("GradTest.Domain.Entities.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GradTest.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GradTest.Domain.Entities.Order", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
