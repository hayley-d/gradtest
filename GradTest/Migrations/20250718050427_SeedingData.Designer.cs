// <auto-generated />
using System;
using GradTest.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GradTest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250718050427_SeedingData")]
    partial class SeedingData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GradTest.Domain.Entities.ExchangeRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("USD")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ZAR")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("GradTest.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<decimal>("ZarToUsd")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GradTest.Domain.Entities.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("GradTest.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("54da348a-cd49-406c-a6f3-97f577c996af"),
                            Category = "Book",
                            Description = "The witcher book",
                            Name = "The witcher 1",
                            Price = 99m,
                            StockQuantity = 7
                        },
                        new
                        {
                            Id = new Guid("512b837c-7cd6-499e-b54f-648862908727"),
                            Category = "Book",
                            Description = "The witcher book 2",
                            Name = "The witcher 2",
                            Price = 99m,
                            StockQuantity = 7
                        },
                        new
                        {
                            Id = new Guid("4512c1d2-67d2-4dfe-a7c6-779e95847b12"),
                            Category = "Book",
                            Description = "The witcher book 3",
                            Name = "The witcher 3",
                            Price = 99m,
                            StockQuantity = 7
                        },
                        new
                        {
                            Id = new Guid("86ceeb4f-32de-4667-9c01-15fbeb35dd77"),
                            Category = "Book",
                            Description = "Lotr book 1",
                            Name = "Lord of the Rings 1",
                            Price = 99m,
                            StockQuantity = 7
                        },
                        new
                        {
                            Id = new Guid("2dbad133-6d76-4abc-b470-796e0bc706c9"),
                            Category = "Book",
                            Description = "Lotr book 2",
                            Name = "Lord of the Rings 2",
                            Price = 99m,
                            StockQuantity = 7
                        },
                        new
                        {
                            Id = new Guid("52aca56e-603b-458d-ad8f-69a44142ba2a"),
                            Category = "Book",
                            Description = "Lotr book 3",
                            Name = "Lord of the Rings 3",
                            Price = 99m,
                            StockQuantity = 7
                        });
                });

            modelBuilder.Entity("GradTest.Domain.Entities.OrderProduct", b =>
                {
                    b.HasOne("GradTest.Domain.Entities.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GradTest.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GradTest.Domain.Entities.Order", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
